package arprast.closeusb;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author LANTAI3
 */
public class ARPRASTCloseUsb extends javax.swing.JFrame {

    /**
     * Creates new form ARPRASTCloseUsb
     */
    public ARPRASTCloseUsb() {
        initComponents();
         AksiAski();
         try {
             DeteksiPortOpenOrClose();
         }
         catch (Exception x){
             RegistryCreatNilai("Open");
             DeteksiPortOpenOrClose();  
         }      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label1 = new java.awt.Label();
        Open = new javax.swing.JButton();
        Close = new javax.swing.JButton();
        label2 = new java.awt.Label();
        label3 = new java.awt.Label();

        label1.setText("label1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Open Close USB Storage Port");

        Open.setText("Open Usb");

        Close.setText("Tutup Usb");

        label2.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        label2.setForeground(new java.awt.Color(204, 0, 0));

        label3.setFont(new java.awt.Font("Dialog", 2, 10)); // NOI18N
        label3.setName(""); // NOI18N
        label3.setText("Copy left by ARPRAST-SOFT");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(label2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Open)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Close)))
                .addContainerGap(53, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Close)
                    .addComponent(Open))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-264)/2, (screenSize.height-128)/2, 264, 128);
    }// </editor-fold>//GEN-END:initComponents
    
     int JmlhLog = 3;
     private boolean Keluar(){
         if (JmlhLog == 0){
                return false;
          }
         return true;
     }
     private void InpuJudulMasak(){         
         JPasswordField Input = new JPasswordField();

         Object[] Object ={
          "Masukan Pass  ", Input
        };
        
        int Pilih = JOptionPane.showConfirmDialog(null , Object , "Security ", JOptionPane.OK_CANCEL_OPTION);
        if (Pilih == JOptionPane.OK_OPTION){
            if (Input.getText().equals("nonkatasandi-=")){
            }
            else {
                JOptionPane.showMessageDialog(null, "Password Salah");
                JmlhLog = JmlhLog - 1;
                if (Keluar()){
                    InpuJudulMasak();
                }
                else {
                    System.exit(1);
                }                              
            }           
        }
        else {
            System.exit(1);
        }
     }
     
     private void  AksiAski(){
         Open.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                RegistryCreatNilai("open");
                RegistryBukaPort();
                RestartComputer();
                DeteksiPortOpenOrClose();
            }           
        });
         
         Close.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                RegistryCreatNilai("close");
                RegistryTutupPort();
                RestartComputer();
                DeteksiPortOpenOrClose();
            }           
        });
     }
     
     private void RestartComputer() {

        int Pilih = JOptionPane.showConfirmDialog(null, "Computer harus di restart ? ( Yes Or No ) ", "Perhatian", JOptionPane.YES_NO_OPTION);
        if (Pilih == JOptionPane.YES_OPTION){
             try {
                 Runtime r=Runtime.getRuntime();
                 r.exec("shutdown -r");
             } catch (IOException ex) {
                 Logger.getLogger(ARPRASTCloseUsb.class.getName()).log(Level.SEVERE, null, ex);
             }
        }
        else {
            JOptionPane.showMessageDialog(null, "Tapi ingat y !, settingan berfungsi setelah di restart");
        }
        // Create Runtime object
        //Runtime r=Runtime.getRuntime();

        // Shutdown system
        //r.exec("shutdown -s");

        // Restart system
        //r.exec("shutdown -r");

        // Shutdown after specific time (here 60 seconds)
       // r.exec("shutdown -s -t 60");

        // Restart after specific time (here 60 seconds)
        //r.exec("shutdown -r -t 60");

     }
     
     private void DeteksiPortOpenOrClose(){
        String value = "";
        try {
            
            value = WinRegistry.readString(
            WinRegistry.HKEY_LOCAL_MACHINE,
            "SYSTEM\\CurrentControlSet\\services\\USBSTOR",
            "OpenClose");
            
            if (value.equalsIgnoreCase("Close")){
                label2.setText("Port Usb Storage Tertutup");
                Open.setEnabled(true);
                Close.setEnabled(false);
            }
            else {
                label2.setText("Port Usb Storage Terbuka");
                Open.setEnabled(false);
                Close.setEnabled(true);
            }
             
        } catch (IllegalArgumentException ex) {
            JOptionPane.showMessageDialog(null, ARPRASTCloseUsb.class.getName() + " "+ ex + "");
            Logger.getLogger(ARPRASTCloseUsb.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
             JOptionPane.showMessageDialog(null, ARPRASTCloseUsb.class.getName() + " "+ ex + "");
            Logger.getLogger(ARPRASTCloseUsb.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
             JOptionPane.showMessageDialog(null, ARPRASTCloseUsb.class.getName() + " "+ ex + "");
            Logger.getLogger(ARPRASTCloseUsb.class.getName()).log(Level.SEVERE, null, ex);
        }
     }
     
     public void RegistryTutupPort() {
        try {
               String regDelete= "HKLM\\SYSTEM\\CurrentControlSet\\services\\USBSTOR /V Start /F";
               Runtime rt2 = Runtime.getRuntime ();
               Process proc2 = rt2.exec ("REG DELETE "+regDelete);
            
               String regValue = "HKLM\\SYSTEM\\CurrentControlSet\\services\\USBSTOR /V Start /T REG_DWORD /D \"00000004\"";

               Runtime rt = Runtime.getRuntime ();
               Process proc = rt.exec ("REG ADD "+regValue);

        } catch (IOException ex) {
            Logger.getLogger(ARPRASTCloseUsb.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
     public void RegistryBukaPort() {
        try {
            /*
             * Delete
             */
            String regDelete= "HKLM\\SYSTEM\\CurrentControlSet\\services\\USBSTOR /V Start /F";
            Runtime rt2 = Runtime.getRuntime ();
            Process proc2 = rt2.exec ("REG DELETE "+regDelete);
               
            /*
             * Created
             */
            String regValue = "HKLM\\SYSTEM\\CurrentControlSet\\services\\USBSTOR /V Start /T REG_DWORD /D \"00000003\"";

            Runtime rt = Runtime.getRuntime ();
            Process proc = rt.exec ("REG ADD "+regValue);

        } catch (IOException ex) {
            Logger.getLogger(ARPRASTCloseUsb.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
     
     public void RegistryCreatNilai(String OpenClose) {
        try {
            /*
               jqReg _jr = new jqReg();
               String message = _jr.jqReg(RKey.HKEY_LOCAL_MACHINE_SYSTEM, "\\CurrentControlSet\\services\\USBSTOR"
                       ,keyType.String_Value, "OpenClose",OpenClose);
               //DeteksiPortOpenOrClose();
            */
            
            WinRegistry.writeStringValue(
                         WinRegistry.HKEY_LOCAL_MACHINE,
                         "SYSTEM\\CurrentControlSet\\services\\USBSTOR",
                         "OpenClose",
                         OpenClose);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(ARPRASTCloseUsb.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(ARPRASTCloseUsb.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(ARPRASTCloseUsb.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ARPRASTCloseUsb.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ARPRASTCloseUsb.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ARPRASTCloseUsb.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ARPRASTCloseUsb.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new ARPRASTCloseUsb().setVisible(false);
                ARPRASTCloseUsb sa = new ARPRASTCloseUsb();
                sa.setVisible(true);
                sa.InpuJudulMasak();
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Close;
    private javax.swing.JButton Open;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    // End of variables declaration//GEN-END:variables
}

class OS {
    String OS;
    String OS2;
    //public static boolean windows;
    /*
     * Bisa mengunakan logika ini
     */
    /*
     public OS (){
         //OS = System.getProperty("os.name").toLowerCase();
         return OS;
    }
     *
     */
     public  String OsApa () {
         //model lain mengambil string
         OS = System.getProperty("os.name").toLowerCase();
         return  OS;
    }
     
}
